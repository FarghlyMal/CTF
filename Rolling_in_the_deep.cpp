#include <stdio.h>
#include <stdint.h>
#include <string.h>

uint8_t memory[] = {
0x28, 0xFE, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEA, 0xEE, 0x04, 0xFD, 0x7F, 0x00, 0x00,
 0x38, 0xFE, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x17, 0x9A, 0x00, 0x3B, 0x12, 0x1B, 0x7A, 0x16, 0xB0, 0xBB, 0xCA, 0x85, 0xF2, 0xE5, 0x2A, 0xFE,
 0x41, 0xF3, 0x45, 0x85, 0xE4, 0x84, 0x86, 0x70, 0xFD, 0xBD, 0x4B, 0xEE, 0xBF, 0x2B, 0x5E, 0xEA,
 0xB3, 0x80, 0xCE, 0x77, 0x7F, 0xA9, 0xE1, 0xC6, 0xCD, 0x0F, 0xCE, 0x63, 0xDA, 0xFC, 0x86, 0x93,
 0x27, 0x57, 0x02, 0xEE, 0x02, 0x88, 0x73, 0xB0, 0xD4, 0xC1, 0x99, 0x61, 0x4A, 0x1E, 0x7F, 0x96,
 0x5A, 0x84, 0x06, 0x45, 0xAE, 0xCB, 0xE8, 0xF3, 0x57, 0xFE, 0xA6, 0x3D, 0x5E, 0x41, 0x08, 0xD0,
 0x33, 0x22, 0x21, 0x81, 0x20, 0xDD, 0x00, 0xA0, 0x23, 0xAF, 0x71, 0x04, 0x8B, 0xF5, 0x18, 0x1D,
 0xE1, 0x0F, 0x65, 0x09, 0xCE, 0x42, 0x78, 0x3E, 0xC3, 0x37, 0xCA, 0x8F, 0x64, 0x32, 0xE0, 0xAC,
 0xDE, 0x91, 0x7C, 0x2A, 0xC0, 0x07, 0xF4, 0x95, 0x9F, 0x40, 0x53, 0xE5, 0x67, 0xB6, 0x7A, 0x52,
 0x4E, 0x3F, 0x83, 0x4B, 0xC9, 0x82, 0x72, 0x2E, 0x76, 0x1C, 0xF1, 0x1E, 0xCC, 0xB7, 0xD7, 0xC7,
 0x8A, 0x10, 0x79, 0x1A, 0x4D, 0x19, 0x35, 0x16, 0x7D, 0x43, 0x2B, 0xCD, 0x86, 0xAB, 0x44, 0x92,
 0xD4, 0x0E, 0x98, 0x14, 0xB9, 0x9B, 0xA7, 0x24, 0x1B, 0x3C, 0xE2, 0x3A, 0xD3, 0xF0, 0xFD, 0x4F,
 0x77, 0xD1, 0xA3, 0x0C, 0x48, 0x80, 0x6A, 0xDA, 0xBD, 0xD8, 0x47, 0x5B, 0xFA, 0x96, 0x0B, 0xEC,
 0xCF, 0x49, 0xD9, 0x11, 0x7F, 0xB1, 0x27, 0xE7, 0xC5, 0xB2, 0x63, 0xE6, 0x28, 0x36, 0xB3, 0x5D,
 0xFB, 0xDC, 0xA8, 0x70, 0x25, 0xF6, 0xB0, 0x9C, 0xA5, 0x5F, 0xB8, 0x39, 0xE4, 0x85, 0xA9, 0xFC,
 0x13, 0x02, 0x51, 0x30, 0xF2, 0x69, 0xFF, 0x74, 0xBF, 0x59, 0xB5, 0x46, 0x17, 0xC2, 0x58, 0x61,
 0x99, 0xEB, 0xA4, 0x9E, 0x89, 0xEE, 0x6C, 0xEF, 0xA2, 0x90, 0x73, 0x8C, 0x54, 0xBC, 0x6D, 0xDB,
 0x2C, 0xD6, 0xE3, 0xA1, 0x8D, 0x50, 0xF7, 0x34, 0xD5, 0xF9, 0x01, 0x7B, 0x8E, 0xBE, 0x68, 0x6B,
 0x55, 0x9D, 0x2D, 0xED, 0x2F, 0x93, 0x15, 0x1F, 0xC4, 0x88, 0xAA, 0xF8, 0x0D, 0x5C, 0xEA, 0x56,
 0x03, 0xC1, 0x9A, 0x38, 0x05, 0x6F, 0x62, 0x4A, 0x12, 0xDF, 0x60, 0x94, 0x29, 0x75, 0x7E, 0xAD,
 0xE9, 0x0A, 0x31, 0xB4, 0xBB, 0xBA, 0x87, 0x3B, 0x26, 0xD2, 0x6E, 0x66, 0xC8, 0x4C, 0x97, 0xC6,
 0x39, 0x63, 0x33, 0x31, 0x37, 0x38, 0x65, 0x37, 0x65, 0x61, 0x64, 0x66, 0x61, 0x34, 0x61, 0x33,
 0x39, 0x35, 0x64, 0x66, 0x32, 0x63, 0x66, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

char flag_to_be_bruteforced[0x41] = "";
char correct_flag[0x41] = "";

char process_flag(int c1, int c2, char flag_char)
{
    int x = 0x00;

    char result;
    _asm {                          
        mov eax, 0x2AAAAAAB
        mov ecx, c1
        imul ecx
        sar edx, 2
        mov eax, edx
        shr eax, 0x1F
        add edx, eax
        lea eax, [edx + edx * 2]
        shl eax, 3
        sub ecx, eax
        mov esi, ecx
        test cl, 1
        movzx edx, memory[esi + 352]
        movzx eax, dl
        not al
        movzx ecx, al
        cmovz ecx, edx
        movzx edx, cl
        movsx ecx, flag_char
        movzx eax, byte ptr[memory + ecx + 0x60]
        xor edx, eax
        movzx   ebx, byte ptr[memory + edx + 0x60]
        movzx eax, bl
        movzx ecx, bl
        xor al, 0x42
        movzx edx, al
        and cl, 1
        lea eax, [memory + 0x20]
        cmovz edx, ebx
        add eax, c2
        not dl
        //       mov[eax], dl
        cmp dl, byte ptr[eax]
        sete al
        mov result, al
    }
    return result;
}

void bruteForce(const char* dictionary) {
    int c1 = 0, c2 = 0;
    int i = 0, j = 0;
    int dict_len = strlen(dictionary);

    while (i < 0x40) {
        char current_char = dictionary[j];
        flag_to_be_bruteforced[i] = current_char;

        if (process_flag(c1, c2, current_char)) {
            correct_flag[i] = current_char;
            printf("Found correct character at position %d: %c\n", i, current_char);
            i++;
            j = 0;
            c1++;
            c2++;
        }
        else {
            j++;
            if (j >= dict_len) {
                j = 0;
                i++;
            }
        }

    }
    correct_flag[i] = '\0';
}

int main() {
    const char dictionary[] = "XABCDEFGHIJKLMNOPQRSTUVWXYZ{}abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_?";

    printf("Starting brute force...\n");
    bruteForce(dictionary);

    printf("\nFull Correct Flag: %s\n", correct_flag);
    return 0;
}
